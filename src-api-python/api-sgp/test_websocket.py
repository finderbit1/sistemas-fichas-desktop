"""
Script de teste para verificar se o WebSocket est√° funcionando corretamente.
Execute este script em um terminal separado enquanto o servidor est√° rodando.
"""

import asyncio
import websockets
import json
from datetime import datetime

async def test_websocket():
    """Testa a conex√£o WebSocket e troca de mensagens"""
    
    uri = "ws://localhost:8000/ws/pedidos"
    print(f"üîå Conectando ao WebSocket: {uri}")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ Conectado com sucesso!")
            
            # Aguardar mensagem de boas-vindas
            welcome_msg = await websocket.recv()
            welcome_data = json.loads(welcome_msg)
            print(f"üì® Mensagem de boas-vindas: {welcome_data}")
            
            # Enviar ping
            print("\nüíì Enviando ping...")
            await websocket.send(json.dumps({"type": "ping"}))
            
            # Aguardar pong
            pong_msg = await websocket.recv()
            pong_data = json.loads(pong_msg)
            print(f"üì® Resposta: {pong_data}")
            
            # Solicitar refresh
            print("\nüîÑ Solicitando refresh dos pedidos...")
            await websocket.send(json.dumps({"type": "get_pedidos"}))
            
            # Aguardar resposta
            refresh_msg = await websocket.recv()
            refresh_data = json.loads(refresh_msg)
            print(f"üì® Resposta: {refresh_data}")
            
            # Aguardar por 5 segundos para receber qualquer atualiza√ß√£o
            print("\n‚è≥ Aguardando 5 segundos por atualiza√ß√µes...")
            try:
                while True:
                    msg = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    data = json.loads(msg)
                    print(f"üì® Atualiza√ß√£o recebida: {data.get('type')} - {data.get('message', data.get('action'))}")
            except asyncio.TimeoutError:
                print("‚è∞ Timeout - nenhuma atualiza√ß√£o recebida (isso √© normal)")
            
            print("\n‚úÖ Teste conclu√≠do com sucesso!")
            
    except ConnectionRefusedError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor")
        print("   Certifique-se de que o servidor est√° rodando em http://localhost:8000")
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")

async def test_multiple_clients():
    """Testa m√∫ltiplos clientes conectados simultaneamente"""
    
    print("\n" + "="*60)
    print("üîå Testando m√∫ltiplos clientes simult√¢neos...")
    print("="*60 + "\n")
    
    uri = "ws://localhost:8000/ws/pedidos"
    
    async def client(client_id):
        """Simula um cliente"""
        try:
            async with websockets.connect(uri) as websocket:
                # Receber mensagem de boas-vindas
                welcome = await websocket.recv()
                print(f"Cliente {client_id}: Conectado!")
                
                # Aguardar por mensagens
                try:
                    while True:
                        msg = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                        data = json.loads(msg)
                        print(f"Cliente {client_id}: Recebeu {data.get('type')}")
                except asyncio.TimeoutError:
                    print(f"Cliente {client_id}: Timeout (normal)")
                    
        except Exception as e:
            print(f"Cliente {client_id}: Erro - {e}")
    
    # Criar 3 clientes simult√¢neos
    tasks = [client(i) for i in range(1, 4)]
    await asyncio.gather(*tasks)
    
    print("\n‚úÖ Teste de m√∫ltiplos clientes conclu√≠do!")

async def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("üß™ TESTE DO SISTEMA DE SINCRONIZA√á√ÉO WEBSOCKET")
    print("="*60)
    print()
    print("Este script testar√°:")
    print("1. Conex√£o b√°sica ao WebSocket")
    print("2. Troca de mensagens (ping/pong)")
    print("3. M√∫ltiplos clientes simult√¢neos")
    print()
    print("‚ö†Ô∏è  Certifique-se de que o servidor est√° rodando!")
    print()
    
    # Teste 1: Conex√£o b√°sica
    print("\nüìã TESTE 1: Conex√£o B√°sica")
    print("-" * 60)
    await test_websocket()
    
    # Aguardar um pouco
    await asyncio.sleep(2)
    
    # Teste 2: M√∫ltiplos clientes
    print("\nüìã TESTE 2: M√∫ltiplos Clientes")
    print("-" * 60)
    await test_multiple_clients()
    
    print("\n" + "="*60)
    print("üéâ TODOS OS TESTES CONCLU√çDOS!")
    print("="*60)
    print()
    print("Se todos os testes passaram, o sistema est√° funcionando corretamente!")
    print()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro fatal: {e}")


