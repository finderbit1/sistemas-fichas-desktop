#!/bin/bash

# üöÄ SCRIPT DE SETUP - PostgreSQL 18
# Configura PostgreSQL para o Sistema de Fichas

set -e

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Banner
clear
echo "=================================================="
echo -e "${BLUE}üêò SETUP POSTGRESQL 18 - Sistema de Fichas${NC}"
echo "=================================================="
echo ""

# Ler configura√ß√µes do banco.conf
echo -e "${BLUE}üìÅ Lendo configura√ß√µes de banco.conf...${NC}"

if [ ! -f "banco.conf" ]; then
    echo -e "${RED}‚ùå Arquivo banco.conf n√£o encontrado!${NC}"
    echo "Execute este script no diret√≥rio src-api-python/api-sgp"
    exit 1
fi

# Parse banco.conf
POSTGRES_DB=$(grep "^POSTGRES_DB=" banco.conf | cut -d'=' -f2)
POSTGRES_USER=$(grep "^POSTGRES_USER=" banco.conf | cut -d'=' -f2)
POSTGRES_PASSWORD=$(grep "^POSTGRES_PASSWORD=" banco.conf | cut -d'=' -f2)
POSTGRES_HOST=$(grep "^POSTGRES_HOST=" banco.conf | cut -d'=' -f2)
POSTGRES_PORT=$(grep "^POSTGRES_PORT=" banco.conf | cut -d'=' -f2)

echo -e "${GREEN}‚úÖ Configura√ß√µes carregadas:${NC}"
echo "   Host: $POSTGRES_HOST"
echo "   Port: $POSTGRES_PORT"
echo "   Database: $POSTGRES_DB"
echo "   User: $POSTGRES_USER"
echo ""

# Verificar se PostgreSQL est√° instalado
echo -e "${BLUE}üîç Verificando PostgreSQL...${NC}"

if ! command -v psql &> /dev/null; then
    echo -e "${RED}‚ùå PostgreSQL n√£o est√° instalado!${NC}"
    echo ""
    echo -e "${YELLOW}üì¶ Para instalar PostgreSQL 18:${NC}"
    echo ""
    echo "# Arch Linux:"
    echo "sudo pacman -S postgresql"
    echo "sudo -u postgres initdb -D /var/lib/postgres/data"
    echo "sudo systemctl start postgresql"
    echo "sudo systemctl enable postgresql"
    echo ""
    echo "# Ubuntu/Debian:"
    echo "sudo apt install postgresql-18 postgresql-contrib-18"
    echo "sudo systemctl start postgresql"
    echo ""
    echo "# Fedora:"
    echo "sudo dnf install postgresql-server postgresql-contrib"
    echo "sudo postgresql-setup --initdb"
    echo "sudo systemctl start postgresql"
    exit 1
fi

PG_VERSION=$(psql --version | awk '{print $3}' | cut -d'.' -f1)
echo -e "${GREEN}‚úÖ PostgreSQL $PG_VERSION instalado${NC}"
echo ""

# Verificar se o servi√ßo est√° rodando
echo -e "${BLUE}üîç Verificando servi√ßo PostgreSQL...${NC}"

if ! sudo systemctl is-active --quiet postgresql; then
    echo -e "${YELLOW}‚ö†Ô∏è  PostgreSQL n√£o est√° rodando. Iniciando...${NC}"
    sudo systemctl start postgresql
    sleep 2
fi

echo -e "${GREEN}‚úÖ PostgreSQL est√° rodando${NC}"
echo ""

# Criar banco de dados e usu√°rio
echo -e "${BLUE}üî® Criando banco de dados e usu√°rio...${NC}"

sudo -u postgres psql <<EOF
-- Criar usu√°rio se n√£o existir
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_user WHERE usename = '$POSTGRES_USER') THEN
        CREATE USER $POSTGRES_USER WITH PASSWORD '$POSTGRES_PASSWORD';
        RAISE NOTICE 'Usu√°rio $POSTGRES_USER criado';
    ELSE
        RAISE NOTICE 'Usu√°rio $POSTGRES_USER j√° existe';
    END IF;
END
\$\$;

-- Criar banco se n√£o existir
SELECT 'CREATE DATABASE $POSTGRES_DB OWNER $POSTGRES_USER'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$POSTGRES_DB')\gexec

-- Conceder privil√©gios
GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_DB TO $POSTGRES_USER;

-- Permitir criar tabelas no schema public
\c $POSTGRES_DB
GRANT ALL ON SCHEMA public TO $POSTGRES_USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $POSTGRES_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $POSTGRES_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $POSTGRES_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $POSTGRES_USER;

\q
EOF

echo -e "${GREEN}‚úÖ Banco e usu√°rio configurados${NC}"
echo ""

# Testar conex√£o
echo -e "${BLUE}üß™ Testando conex√£o...${NC}"

if PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT version();" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Conex√£o bem-sucedida!${NC}"
else
    echo -e "${RED}‚ùå Falha na conex√£o${NC}"
    exit 1
fi

echo ""

# Instalar depend√™ncias Python
echo -e "${BLUE}üì¶ Verificando depend√™ncias Python...${NC}"

if [ ! -f "requirements.txt" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  requirements.txt n√£o encontrado${NC}"
else
    # Verificar se psycopg2 est√° instalado
    if ! pip show psycopg2-binary > /dev/null 2>&1; then
        echo -e "${YELLOW}üì¶ Instalando psycopg2-binary...${NC}"
        pip install psycopg2-binary
    fi
    echo -e "${GREEN}‚úÖ Depend√™ncias OK${NC}"
fi

echo ""

# Criar tabelas
echo -e "${BLUE}üèóÔ∏è  Criando tabelas...${NC}"

if command -v python3 &> /dev/null; then
    python3 -c "from database.database import create_db_and_tables; create_db_and_tables()" 2>&1 | grep -v "WARNING"
    echo -e "${GREEN}‚úÖ Tabelas criadas${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Python3 n√£o encontrado. Execute manualmente:${NC}"
    echo "   python -c 'from database.database import create_db_and_tables; create_db_and_tables()'"
fi

echo ""

# Resumo final
echo "=================================================="
echo -e "${GREEN}‚úÖ SETUP CONCLU√çDO!${NC}"
echo "=================================================="
echo ""
echo -e "${BLUE}üìä Informa√ß√µes de Conex√£o:${NC}"
echo "   Host: $POSTGRES_HOST"
echo "   Port: $POSTGRES_PORT"
echo "   Database: $POSTGRES_DB"
echo "   User: $POSTGRES_USER"
echo ""
echo -e "${BLUE}üîó String de Conex√£o:${NC}"
echo "   postgresql://$POSTGRES_USER:****@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB"
echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos Passos:${NC}"
echo "   1. Verifique banco.conf (DATABASE_TYPE=postgresql)"
echo "   2. Execute: ./start.sh"
echo "   3. Para migrar dados do SQLite, execute: python migrate_to_postgresql.py"
echo ""
echo -e "${GREEN}üéâ PostgreSQL est√° pronto para uso!${NC}"
echo ""



