/**
 * üîß Carregador de Configura√ß√£o da API - Vers√£o TAURI
 * 
 * Sistema adaptado para funcionar com Tauri Desktop App.
 * Usa APIs nativas do Tauri para ler arquivos do sistema.
 * 
 * Prioridade de carregamento:
 * 1. Arquivo no diret√≥rio de recursos (Tauri resourceDir)
 * 2. Arquivo no diret√≥rio de dados da app (Tauri appDataDir)
 * 3. LocalStorage (√∫ltima configura√ß√£o v√°lida)
 * 4. Configura√ß√£o padr√£o (localhost)
 */

const STORAGE_KEY = 'api_config';
const CONFIG_FILENAME = 'api-config.json';
const DEFAULT_CONFIG = {
  apiURL: 'http://localhost:8000',
  wsURL: 'ws://localhost:8000',
  timeout: 10000,
  retries: 3
};

/**
 * Detecta se est√° rodando em Tauri
 */
function isTauri() {
  return typeof window !== 'undefined' && window.__TAURI__ !== undefined;
}

/**
 * Carrega configura√ß√£o usando Tauri FS API
 */
async function loadConfigFromTauriFS() {
  if (!isTauri()) {
    console.log('‚ö†Ô∏è N√£o est√° rodando em Tauri, pulando FS API');
    return null;
  }

  try {
    const { readTextFile, BaseDirectory } = window.__TAURI__.fs;
    const { resourceDir, appDataDir } = window.__TAURI__.path;
    
    // Tentar ler do diret√≥rio de recursos primeiro
    try {
      console.log('üîç Tentando ler de resourceDir...');
      const resourcePath = await resourceDir();
      console.log('üìÅ Resource path:', resourcePath);
      
      const configText = await readTextFile(CONFIG_FILENAME, {
        baseDir: BaseDirectory.Resource
      });
      
      const config = JSON.parse(configText);
      console.log('‚úÖ Configura√ß√£o carregada de resourceDir');
      return config;
    } catch (resourceError) {
      console.log('‚ö†Ô∏è N√£o encontrado em resourceDir:', resourceError.message);
    }
    
    // Tentar ler do diret√≥rio de dados da app
    try {
      console.log('üîç Tentando ler de appDataDir...');
      const appDataPath = await appDataDir();
      console.log('üìÅ AppData path:', appDataPath);
      
      const configText = await readTextFile(CONFIG_FILENAME, {
        baseDir: BaseDirectory.AppData
      });
      
      const config = JSON.parse(configText);
      console.log('‚úÖ Configura√ß√£o carregada de appDataDir');
      return config;
    } catch (appDataError) {
      console.log('‚ö†Ô∏è N√£o encontrado em appDataDir:', appDataError.message);
    }
    
    return null;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao usar Tauri FS:', error);
    return null;
  }
}

/**
 * Carrega configura√ß√£o via fetch (fallback para web)
 */
async function loadConfigFromWeb() {
  try {
    console.log('üîç Tentando carregar via fetch (modo web)...');
    
    const response = await fetch('/config/api-config.json');
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const config = await response.json();
    console.log('‚úÖ Configura√ß√£o carregada via web (fetch)');
    return config;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar via fetch:', error.message);
    return null;
  }
}

/**
 * Carrega configura√ß√£o do localStorage
 */
function loadConfigFromStorage() {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    
    if (!stored) {
      return null;
    }
    
    const config = JSON.parse(stored);
    console.log('üì¶ Configura√ß√£o carregada do localStorage');
    return config;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao ler localStorage:', error);
    return null;
  }
}

/**
 * Salva configura√ß√£o no localStorage
 */
function saveConfigToStorage(config) {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(config));
    localStorage.setItem(STORAGE_KEY + '_timestamp', new Date().toISOString());
    console.log('üíæ Configura√ß√£o salva no localStorage');
  } catch (error) {
    console.error('‚ùå Erro ao salvar configura√ß√£o:', error);
  }
}

/**
 * Salva configura√ß√£o usando Tauri FS API
 */
async function saveConfigToTauriFS(config) {
  if (!isTauri()) {
    console.log('‚ö†Ô∏è N√£o est√° em Tauri, pulando salvamento em FS');
    return false;
  }

  try {
    const { writeTextFile, BaseDirectory } = window.__TAURI__.fs;
    
    const configText = JSON.stringify(config, null, 2);
    
    await writeTextFile(CONFIG_FILENAME, configText, {
      baseDir: BaseDirectory.AppData
    });
    
    console.log('üíæ Configura√ß√£o salva em appDataDir');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar em Tauri FS:', error);
    return false;
  }
}

/**
 * Testa se a configura√ß√£o est√° funcionando
 */
async function testConfig(config) {
  try {
    console.log('üß™ Testando conex√£o com:', config.apiURL);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(`${config.apiURL}/health`, {
      signal: controller.abortSignal
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      console.log('‚úÖ Conex√£o com API bem-sucedida!');
      return true;
    }
    
    console.warn('‚ö†Ô∏è API respondeu com status:', response.status);
    return false;
    
  } catch (error) {
    if (error.name === 'AbortError') {
      console.warn('‚è∞ Timeout ao conectar na API');
    } else {
      console.warn('‚ùå Erro ao testar conex√£o:', error.message);
    }
    return false;
  }
}

/**
 * Carrega configura√ß√£o com sistema de fallback
 */
export async function loadApiConfig() {
  console.log('üöÄ Iniciando carregamento de configura√ß√£o da API...');
  console.log('üñ•Ô∏è Ambiente:', isTauri() ? 'Tauri Desktop' : 'Web Browser');
  console.log('');
  
  let config = null;
  let source = null;
  
  // 1. Tentar carregar do Tauri FS (se estiver em Tauri)
  if (isTauri()) {
    config = await loadConfigFromTauriFS();
    if (config) {
      source = 'Tauri FS';
    }
  }
  
  // 2. Se n√£o achou, tentar via fetch (web ou dev)
  if (!config) {
    config = await loadConfigFromWeb();
    if (config) {
      source = 'Web (fetch)';
    }
  }
  
  // 3. Se n√£o achou, tentar localStorage
  if (!config) {
    console.log('üì¶ Tentando carregar do localStorage...');
    config = loadConfigFromStorage();
    if (config) {
      source = 'localStorage';
    }
  }
  
  // 4. Se n√£o achou, usar padr√£o
  if (!config) {
    console.log('‚öôÔ∏è Usando configura√ß√£o padr√£o...');
    config = { ...DEFAULT_CONFIG };
    source = 'padr√£o';
  }
  
  console.log(`\nüìã Configura√ß√£o carregada (fonte: ${source}):`);
  console.log('   ‚îú‚îÄ API URL:', config.apiURL);
  console.log('   ‚îú‚îÄ WebSocket URL:', config.wsURL);
  console.log('   ‚îú‚îÄ Timeout:', config.timeout, 'ms');
  console.log('   ‚îî‚îÄ Retries:', config.retries);
  
  // Testar conex√£o (n√£o bloqueante)
  testConfig(config).then(isWorking => {
    if (isWorking) {
      // Salvar no storage como backup
      saveConfigToStorage(config);
      
      // Se est√° em Tauri e config n√£o veio do FS, salvar l√° tamb√©m
      if (isTauri() && source !== 'Tauri FS') {
        saveConfigToTauriFS(config);
      }
    } else {
      console.warn('\n‚ö†Ô∏è ATEN√á√ÉO: N√£o foi poss√≠vel conectar na API!');
      console.warn('   Verifique se o servidor est√° rodando.');
      console.warn('   O sistema tentar√° usar cache local quando poss√≠vel.\n');
    }
  });
  
  return config;
}

/**
 * Atualiza configura√ß√£o manualmente
 */
export async function updateApiConfig(newConfig) {
  console.log('üîÑ Atualizando configura√ß√£o da API...');
  
  // Validar
  if (!newConfig.apiURL || !newConfig.wsURL) {
    throw new Error('apiURL e wsURL s√£o obrigat√≥rios');
  }
  
  const config = {
    ...DEFAULT_CONFIG,
    ...newConfig,
    updated: new Date().toISOString()
  };
  
  // Salvar no localStorage
  saveConfigToStorage(config);
  
  // Salvar no Tauri FS se dispon√≠vel
  if (isTauri()) {
    await saveConfigToTauriFS(config);
  }
  
  console.log('‚úÖ Configura√ß√£o atualizada:', config);
  
  return config;
}

/**
 * Retorna configura√ß√£o atual
 */
export function getCurrentConfig() {
  const stored = loadConfigFromStorage();
  if (stored) {
    return stored;
  }
  
  return { ...DEFAULT_CONFIG };
}

/**
 * Limpa configura√ß√£o salva
 */
export function clearConfig() {
  console.log('üóëÔ∏è Limpando configura√ß√£o salva...');
  localStorage.removeItem(STORAGE_KEY);
  localStorage.removeItem(STORAGE_KEY + '_timestamp');
  console.log('‚úÖ Configura√ß√£o limpa');
}

/**
 * Mostra informa√ß√µes de debug
 */
export function showConfigInfo() {
  console.log('\nüìä INFORMA√á√ïES DE CONFIGURA√á√ÉO\n');
  console.log('Ambiente:', isTauri() ? 'üñ•Ô∏è Tauri Desktop' : 'üåê Web Browser');
  console.log('\nConfigura√ß√£o atual:');
  console.table(getCurrentConfig());
  
  const timestamp = localStorage.getItem(STORAGE_KEY + '_timestamp');
  if (timestamp) {
    console.log('\n√öltima atualiza√ß√£o:', new Date(timestamp).toLocaleString('pt-BR'));
  }
  
  console.log('\nPara atualizar via console:');
  console.log('  updateApiConfig({ apiURL: "http://192.168.1.100:8000", wsURL: "ws://192.168.1.100:8000" })');
  console.log('\nPara limpar:');
  console.log('  clearConfig()');
  console.log('');
}

// Exportar para uso global (debug no console)
if (typeof window !== 'undefined') {
  window.showConfigInfo = showConfigInfo;
  window.updateApiConfig = updateApiConfig;
  window.clearConfig = clearConfig;
  window.isTauri = isTauri;
}

export default {
  loadApiConfig,
  updateApiConfig,
  getCurrentConfig,
  clearConfig,
  showConfigInfo,
  isTauri
};

