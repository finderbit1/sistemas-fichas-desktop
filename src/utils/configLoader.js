/**
 * üîß Carregador de Configura√ß√£o da API
 * 
 * Sistema que carrega configura√ß√£o da API a partir de arquivo local.
 * Suporta m√∫ltiplas fontes e fallbacks autom√°ticos.
 * 
 * Prioridade de carregamento:
 * 1. Arquivo config/api-config.json (local)
 * 2. LocalStorage (√∫ltima configura√ß√£o v√°lida)
 * 3. Configura√ß√£o padr√£o (localhost)
 */

const CONFIG_FILE_PATH = '/config/api-config.json';
const STORAGE_KEY = 'api_config';
const DEFAULT_CONFIG = {
  apiURL: 'http://192.168.15.3:8000',
  wsURL: 'ws://192.168.15.3:8000',
  timeout: 10000,
  retries: 3
};

/**
 * Carrega configura√ß√£o do arquivo config/api-config.json
 */
async function loadConfigFromFile() {
  try {
    console.log('üîç Carregando configura√ß√£o de:', CONFIG_FILE_PATH);
    
    const response = await fetch(CONFIG_FILE_PATH);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const config = await response.json();
    
    // Validar configura√ß√£o
    if (!config.apiURL || !config.wsURL) {
      throw new Error('Configura√ß√£o inv√°lida: apiURL e wsURL s√£o obrigat√≥rios');
    }
    
    console.log('‚úÖ Configura√ß√£o carregada do arquivo:', config);
    return config;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar config/api-config.json:', error.message);
    return null;
  }
}

/**
 * Carrega configura√ß√£o do localStorage
 */
function loadConfigFromStorage() {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    
    if (!stored) {
      return null;
    }
    
    const config = JSON.parse(stored);
    console.log('üì¶ Configura√ß√£o carregada do localStorage:', config);
    return config;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao ler localStorage:', error.message);
    return null;
  }
}

/**
 * Salva configura√ß√£o no localStorage
 */
function saveConfigToStorage(config) {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(config));
    localStorage.setItem(STORAGE_KEY + '_timestamp', new Date().toISOString());
    console.log('üíæ Configura√ß√£o salva no localStorage');
  } catch (error) {
    console.error('‚ùå Erro ao salvar configura√ß√£o:', error);
  }
}

/**
 * Testa se a configura√ß√£o est√° funcionando
 */
async function testConfig(config) {
  try {
    console.log('üß™ Testando conex√£o com:', config.apiURL);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(`${config.apiURL}/health`, {
      signal: controller.abortSignal
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      console.log('‚úÖ Conex√£o com API bem-sucedida!');
      return true;
    }
    
    console.warn('‚ö†Ô∏è API respondeu com status:', response.status);
    return false;
    
  } catch (error) {
    if (error.name === 'AbortError') {
      console.warn('‚è∞ Timeout ao conectar na API');
    } else {
      console.warn('‚ùå Erro ao testar conex√£o:', error.message);
    }
    return false;
  }
}

/**
 * Carrega configura√ß√£o com sistema de fallback
 */
export async function loadApiConfig() {
  console.log('üöÄ Iniciando carregamento de configura√ß√£o da API...\n');
  
  let config = null;
  let source = null;
  
  // 1. Tentar carregar do arquivo
  config = await loadConfigFromFile();
  if (config) {
    source = 'arquivo';
  }
  
  // 2. Se n√£o achou, tentar localStorage
  if (!config) {
    console.log('üì¶ Tentando carregar do localStorage...');
    config = loadConfigFromStorage();
    if (config) {
      source = 'localStorage';
    }
  }
  
  // 3. Se n√£o achou, usar padr√£o
  if (!config) {
    console.log('‚öôÔ∏è Usando configura√ß√£o padr√£o...');
    config = { ...DEFAULT_CONFIG };
    source = 'padr√£o';
  }
  
  console.log(`\nüìã Configura√ß√£o carregada (fonte: ${source}):`);
  console.log('   ‚îú‚îÄ API URL:', config.apiURL);
  console.log('   ‚îú‚îÄ WebSocket URL:', config.wsURL);
  console.log('   ‚îú‚îÄ Timeout:', config.timeout, 'ms');
  console.log('   ‚îî‚îÄ Retries:', config.retries);
  
  // Testar conex√£o (n√£o bloqueante)
  testConfig(config).then(isWorking => {
    if (isWorking) {
      // Se funciona e n√£o veio do arquivo, salvar no storage
      if (source !== 'arquivo') {
        saveConfigToStorage(config);
      }
    } else {
      console.warn('\n‚ö†Ô∏è ATEN√á√ÉO: N√£o foi poss√≠vel conectar na API!');
      console.warn('   Verifique se o servidor est√° rodando.');
      console.warn('   O sistema tentar√° usar cache local quando poss√≠vel.\n');
    }
  });
  
  return config;
}

/**
 * Atualiza configura√ß√£o manualmente (via interface admin)
 */
export function updateApiConfig(newConfig) {
  console.log('üîÑ Atualizando configura√ß√£o da API...');
  
  // Validar
  if (!newConfig.apiURL || !newConfig.wsURL) {
    throw new Error('apiURL e wsURL s√£o obrigat√≥rios');
  }
  
  // Garantir valores padr√£o
  const config = {
    ...DEFAULT_CONFIG,
    ...newConfig,
    updated: new Date().toISOString()
  };
  
  // Salvar
  saveConfigToStorage(config);
  
  console.log('‚úÖ Configura√ß√£o atualizada:', config);
  
  return config;
}

/**
 * Retorna configura√ß√£o atual do localStorage
 */
export function getCurrentConfig() {
  const stored = loadConfigFromStorage();
  if (stored) {
    return stored;
  }
  
  // Se n√£o tem no storage, retornar padr√£o
  return { ...DEFAULT_CONFIG };
}

/**
 * Limpa configura√ß√£o salva (volta para padr√£o)
 */
export function clearConfig() {
  console.log('üóëÔ∏è Limpando configura√ß√£o salva...');
  localStorage.removeItem(STORAGE_KEY);
  localStorage.removeItem(STORAGE_KEY + '_timestamp');
  console.log('‚úÖ Configura√ß√£o limpa. Ser√° usada a configura√ß√£o padr√£o.');
}

/**
 * Mostra informa√ß√µes de debug
 */
export function showConfigInfo() {
  console.log('\nüìä INFORMA√á√ïES DE CONFIGURA√á√ÉO\n');
  console.log('Configura√ß√£o atual:');
  console.table(getCurrentConfig());
  
  const timestamp = localStorage.getItem(STORAGE_KEY + '_timestamp');
  if (timestamp) {
    console.log('\n√öltima atualiza√ß√£o:', new Date(timestamp).toLocaleString('pt-BR'));
  }
  
  console.log('\nFonte:', localStorage.getItem(STORAGE_KEY) ? 'localStorage' : 'padr√£o');
  console.log('\nPara atualizar via console:');
  console.log('  updateApiConfig({ apiURL: "http://192.168.1.100:8000", wsURL: "ws://192.168.1.100:8000" })');
  console.log('\nPara limpar:');
  console.log('  clearConfig()');
  console.log('');
}

// Exportar para uso global (debug no console)
if (typeof window !== 'undefined') {
  window.showConfigInfo = showConfigInfo;
  window.updateApiConfig = updateApiConfig;
  window.clearConfig = clearConfig;
}

export default {
  loadApiConfig,
  updateApiConfig,
  getCurrentConfig,
  clearConfig,
  showConfigInfo
};
